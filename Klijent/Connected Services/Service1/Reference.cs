//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Klijent.Service1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service1.IFileServer")]
    public interface IFileServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/GetFile", ReplyAction="http://tempuri.org/IFileServer/GetFileResponse")]
        byte[] GetFile(string virtualPath, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/GetFile", ReplyAction="http://tempuri.org/IFileServer/GetFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetFileAsync(string virtualPath, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/PutFile", ReplyAction="http://tempuri.org/IFileServer/PutFileResponse")]
        void PutFile(MyCloudStore.FileUpload file, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/PutFile", ReplyAction="http://tempuri.org/IFileServer/PutFileResponse")]
        System.Threading.Tasks.Task PutFileAsync(MyCloudStore.FileUpload file, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/DeleteFile", ReplyAction="http://tempuri.org/IFileServer/DeleteFileResponse")]
        void DeleteFile(string virtualPath, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/DeleteFile", ReplyAction="http://tempuri.org/IFileServer/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string virtualPath, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/List", ReplyAction="http://tempuri.org/IFileServer/ListResponse")]
        MyCloudStore.StorageFileInfo[] List(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileServer/List", ReplyAction="http://tempuri.org/IFileServer/ListResponse")]
        System.Threading.Tasks.Task<MyCloudStore.StorageFileInfo[]> ListAsync(string username, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServerChannel : Klijent.Service1.IFileServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServerClient : System.ServiceModel.ClientBase<Klijent.Service1.IFileServer>, Klijent.Service1.IFileServer {
        
        public FileServerClient() {
        }
        
        public FileServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetFile(string virtualPath, string username, string password) {
            return base.Channel.GetFile(virtualPath, username, password);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFileAsync(string virtualPath, string username, string password) {
            return base.Channel.GetFileAsync(virtualPath, username, password);
        }
        
        public void PutFile(MyCloudStore.FileUpload file, string username, string password) {
            base.Channel.PutFile(file, username, password);
        }
        
        public System.Threading.Tasks.Task PutFileAsync(MyCloudStore.FileUpload file, string username, string password) {
            return base.Channel.PutFileAsync(file, username, password);
        }
        
        public void DeleteFile(string virtualPath, string username, string password) {
            base.Channel.DeleteFile(virtualPath, username, password);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string virtualPath, string username, string password) {
            return base.Channel.DeleteFileAsync(virtualPath, username, password);
        }
        
        public MyCloudStore.StorageFileInfo[] List(string username, string password) {
            return base.Channel.List(username, password);
        }
        
        public System.Threading.Tasks.Task<MyCloudStore.StorageFileInfo[]> ListAsync(string username, string password) {
            return base.Channel.ListAsync(username, password);
        }
    }
}
